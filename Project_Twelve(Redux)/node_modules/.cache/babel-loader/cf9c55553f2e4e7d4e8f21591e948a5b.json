{"ast":null,"code":"//import redux from 'redux';\n//import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // const reduxReducer = (state = initialState, action) => {\n//     if(action.type === 'increment'){\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if(action.type === 'decrement'){\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if(action.type === 'increase'){\n//         return {\n//             counter: state.counter + action.value,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if(action.type === 'toggle'){\n//         return{\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// };\n// const store = createStore(reduxReducer);\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store; // store.subscribe();\n// store.dispatch({type: 'increment'});\n// store.dispatch({type: 'decrement'});","map":{"version":3,"sources":["/Users/anjali/Documents/Anjali/React_Tutorial/Project_Twelve(Redux)/src/store/index.js"],"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"mappings":"AAAA;AACA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,mBAAmB,GAAG;AAACC,EAAAA,OAAO,EAAE,CAAV;AAAaC,EAAAA,WAAW,EAAE;AAA1B,CAA5B;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC9BM,EAAAA,IAAI,EAAE,SADwB;AAE9BC,EAAAA,YAAY,EAAGL,mBAFe;AAG9BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KAHK;;AAINQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACP,OAAN;AACA,KANK;;AAONS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACpBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;AACH,KATK;;AAUNC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACH;;AAZK;AAHoB,CAAD,CAAhC;AAmBA,MAAMY,gBAAgB,GAAG;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAzB;AAEA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAC1BM,EAAAA,IAAI,EAAE,gBADoB;AAE1BC,EAAAA,YAAY,EAAES,gBAFY;AAG1BR,EAAAA,QAAQ,EAAE;AACNW,IAAAA,KAAK,CAACT,KAAD,EAAQ;AACTA,MAAAA,KAAK,CAACO,eAAN,GAAwB,IAAxB;AACH,KAHK;;AAING,IAAAA,MAAM,CAACV,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACH;;AANK;AAHgB,CAAD,CAA7B,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;AACzBqB,EAAAA,OAAO,EAAE;AAACnB,IAAAA,OAAO,EAAEE,YAAY,CAACiB,OAAvB;AAAgCC,IAAAA,IAAI,EAAEL,SAAS,CAACI;AAAhD;AADgB,CAAD,CAA5B;AAIA,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAA9B;AAEP,eAAeJ,KAAf,C,CAEA;AACA;AACA","sourcesContent":["//import redux from 'redux';\n//import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit'\n\nconst initialCounterState = {counter: 0, showCounter: true};\n\nconst counterSlice = createSlice({\n   name: 'counter',\n   initialState : initialCounterState,\n   reducers: {\n       increment(state) {\n           state.counter++;\n       },\n       decrement(state) {\n        state.counter--;\n       },\n       increase(state, action) {\n           state.counter = state.counter + action.payload;\n       },\n       toggleCounter(state) {\n           state.showCounter = !state.showCounter;\n       }\n   }\n});\n\nconst initialAuthState = { isAuthenticated: false};\n\nconst authSlice = createSlice({\n    name: 'authentication',\n    initialState: initialAuthState,\n    reducers: {\n        login(state) {\n            state.isAuthenticated = true;\n        },\n        logout(state) {\n            state.isAuthenticated = false;\n        }\n    }\n});\n\n// const reduxReducer = (state = initialState, action) => {\n//     if(action.type === 'increment'){\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if(action.type === 'decrement'){\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if(action.type === 'increase'){\n//         return {\n//             counter: state.counter + action.value,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if(action.type === 'toggle'){\n//         return{\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// };\n\n// const store = createStore(reduxReducer);\n\nconst store = configureStore({\n    reducer: {counter: counterSlice.reducer, auth: authSlice.reducer},\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store;\n\n// store.subscribe();\n// store.dispatch({type: 'increment'});\n// store.dispatch({type: 'decrement'});"]},"metadata":{},"sourceType":"module"}