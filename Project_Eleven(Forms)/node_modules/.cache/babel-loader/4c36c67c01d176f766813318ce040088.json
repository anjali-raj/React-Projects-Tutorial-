{"ast":null,"code":"var _jsxFileName = \"/Users/anjali/Documents/Anjali/React_Tutorial/Project_Eleven(Forms)/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const nameInputChanbgeHandler = event => {\n    setEnteredName(event.target.value);\n\n    if (event.target.value.trim() !== '') {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() !== '') {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue); //nameInputRef.current.value = ''; //Don't manipulate the DOM\n\n    setEnteredName('');\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChanbgeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"omBsZ5NQ7IdrKIzDUlGYC+5wNgo=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/anjali/Documents/Anjali/React_Tutorial/Project_Eleven(Forms)/src/components/SimpleInput.js"],"names":["useState","useRef","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","nameInputChanbgeHandler","event","target","value","trim","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","enteredValue","current","nameInputIsInvalid","nameInputClasses"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,YAAY,GAAGH,MAAM,EAA3B;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,KAAD,CAA5D;;AAEA,QAAMW,uBAAuB,GAAGC,KAAK,IAAI;AACtCN,IAAAA,cAAc,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;;AAEA,QAAGF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,OAA8B,EAAjC,EAAoC;AACnCP,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;AACF,GAND;;AAOA,QAAMQ,oBAAoB,GAAGJ,KAAK,IAAI;AACpCF,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAGL,WAAW,CAACU,IAAZ,OAAuB,EAA1B,EAA6B;AAC3BP,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;AAEH,GAPA;;AAQA,QAAMS,qBAAqB,GAAGL,KAAK,IAAI;AACrCA,IAAAA,KAAK,CAACM,cAAN;AACAR,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAGL,WAAW,CAACU,IAAZ,OAAuB,EAA1B,EAA6B;AAC3BP,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;;AACDA,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ;AACA,UAAMgB,YAAY,GAAGjB,YAAY,CAACkB,OAAb,CAAqBR,KAA1C;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ,EAXqC,CAYrC;;AACAf,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAdD;;AAeA,QAAMiB,kBAAkB,GAAG,CAAChB,kBAAD,IAAuBE,kBAAlD;AACA,QAAMe,gBAAgB,GAAGD,kBAAkB,GAAE,sBAAF,GAA2B,cAAtE;AACA,sBACE;AAAM,IAAA,QAAQ,EAAEN,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEO,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,GAAG,EAAEpB,YAAZ;AAA0B,QAAA,IAAI,EAAC,MAA/B;AAAsC,QAAA,EAAE,EAAC,MAAzC;AAAgD,QAAA,QAAQ,EAAEO,uBAA1D;AAAmF,QAAA,MAAM,EAAEK,oBAA3F;AAAiH,QAAA,KAAK,EAAEX;AAAxH;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGkB,kBAAkB,iBAAI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAlDD;;GAAMrB,W;;KAAAA,W;AAoDN,eAAeA,WAAf","sourcesContent":["import { useState, useRef } from \"react\";\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const nameInputChanbgeHandler = event => {\n     setEnteredName(event.target.value);\n\n     if(event.target.value.trim() !== ''){\n      setEnteredNameIsValid(true);\n    } \n  }\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if(enteredName.trim() !== ''){\n      setEnteredNameIsValid(true);\n    } \n\n }\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if(enteredName.trim() === ''){\n      setEnteredNameIsValid(false);\n      return\n    }\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n    //nameInputRef.current.value = ''; //Don't manipulate the DOM\n    setEnteredName('');\n  };\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid? 'form-control invalid' : 'form-control';\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input ref={nameInputRef} type='text' id='name' onChange={nameInputChanbgeHandler} onBlur={nameInputBlurHandler} value={enteredName}/>\n        {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}