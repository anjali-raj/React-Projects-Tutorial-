{"ast":null,"code":"var _jsxFileName = \"/Users/anjali/Documents/Anjali/React_Tutorial/Project_Eleven(Forms)/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim !== ''); // const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  // const enteredNameIsValid = enteredName.trim() !== '';\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid = enteredEmail.includes('@') && enteredEmail.trim() !== '';\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } // const nameInputChangeHandler = event => {\n  //    setEnteredName(event.target.value); \n  // }\n\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  }; //   const nameInputBlurHandler = event => {\n  //     setEnteredNameTouched(true);\n  //  }\n\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); //setEnteredNameTouched(true);\n\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    } //console.log(enteredName);\n    // setEnteredName('');\n    // setEnteredNameTouched(false);\n\n\n    resetNameInput();\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangedHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your E-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please Enter a valid email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"GfE9I1rVXi7GE0BnxHj5Zf+H2L0=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/anjali/Documents/Anjali/React_Tutorial/Project_Eleven(Forms)/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangedHandler","valueBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmailIsValid","enteredEmail","includes","emailInputIsInvalid","enteredEmailTouched","formIsValid","emailInputChangeHandler","event","setEnteredEmail","target","emailInputBlurHandler","setEnteredEmailTouched","formSubmissionHandler","preventDefault","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import { useState} from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim !== '');\n  // const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  \n\n  // const enteredNameIsValid = enteredName.trim() !== '';\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid = enteredEmail.includes('@') && enteredEmail.trim() !== '';\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n  if(enteredNameIsValid && enteredEmailIsValid){\n    formIsValid = true;\n  }\n\n  // const nameInputChangeHandler = event => {\n  //    setEnteredName(event.target.value); \n  // }\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value); \n }\n  //   const nameInputBlurHandler = event => {\n  //     setEnteredNameTouched(true);\n  //  }\n const emailInputBlurHandler = event => {\n  setEnteredEmailTouched(true);\n}\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    //setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if(!enteredNameIsValid && !enteredEmailIsValid){\n      return;\n    }\n    //console.log(enteredName);\n    // setEnteredName('');\n    // setEnteredNameTouched(false);\n    resetNameInput();\n\n    setEnteredEmail('');\n    setEnteredEmailTouched(false)\n  };\n  \n  const nameInputClasses = nameInputHasError? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid? 'form-control invalid' : 'form-control';\n  \n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' onChange={nameChangedHandler} onBlur={nameBlurHandler} value={enteredName}/>\n        {nameInputHasError && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your E-mail</label>\n        <input type='email' id='email' onChange={emailInputChangeHandler} onBlur={emailInputBlurHandler} value={enteredEmail}/>\n        {emailInputIsInvalid && <p className=\"error-text\">Please Enter a valid email</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}