{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nconst initialInputState = {\n  value: '',\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === 'INPUT') {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === 'BLUR') {\n    return {\n      isTouched: true,\n      value: state.value\n    };\n  }\n\n  if (action.type === 'RESET') {\n    return {\n      isTouched: false,\n      value: ''\n    };\n  }\n\n  return initialInputState;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState); // const [enteredValue, setEnteredValue] = useState('');\n  // const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: 'INPUT',\n      value: event.target.value\n    }); //setEnteredValue(event.target.value); \n  };\n\n  const valueBlurHandler = event => {\n    dispatch({\n      type: 'BLUR'\n    }); //setIsTouched(true);\n  };\n\n  const reset = () => {\n    //setEnteredValue('');\n    //setIsTouched(false);\n    dispatch({\n      type: 'RESET'\n    });\n  };\n\n  return {\n    value: inputState.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    valueBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/anjali/Documents/Anjali/React_Tutorial/Project_Eleven(Forms)/src/hooks/use-input.js"],"names":["useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","target","valueBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,KAAK,EAAE,EADe;AAEtBC,EAAAA,SAAS,EAAE;AAFW,CAA1B;;AAIA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;AACxC,MAAGA,MAAM,CAACC,IAAP,KAAe,OAAlB,EAA0B;AACvB,WAAM;AACFL,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KADZ;AAEFC,MAAAA,SAAS,EAAEE,KAAK,CAACF;AAFf,KAAN;AAIF;;AACD,MAAGG,MAAM,CAACC,IAAP,KAAe,MAAlB,EAAyB;AACrB,WAAM;AACFJ,MAAAA,SAAS,EAAE,IADT;AAEFD,MAAAA,KAAK,EAAEG,KAAK,CAACH;AAFX,KAAN;AAIH;;AACD,MAAGI,MAAM,CAACC,IAAP,KAAe,OAAlB,EAA0B;AACtB,WAAM;AACFJ,MAAAA,SAAS,EAAE,KADT;AAEFD,MAAAA,KAAK,EAAE;AAFL,KAAN;AAIH;;AACD,SAAOD,iBAAP;AACH,CApBD;;AAsBA,MAAMO,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CAACI,iBAAD,EAAoBH,iBAApB,CAAzC,CADgC,CAGhC;AACA;;AAEA,QAAMW,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACR,KAAZ,CAAlC;AACA,QAAMW,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACP,SAA7C;;AAEA,QAAMW,kBAAkB,GAAGC,KAAK,IAAI;AAChCJ,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAE,OAAP;AAAgBL,MAAAA,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad;AAApC,KAAD,CAAR,CADgC,CAEhC;AACF,GAHF;;AAKC,QAAMe,gBAAgB,GAAIF,KAAD,IAAW;AACjCJ,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR,CADiC,CAEjC;AACF,GAHD;;AAIA,QAAMW,KAAK,GAAG,MAAM;AAChB;AACA;AACAP,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACH,GAJD;;AAMD,SAAM;AACFL,IAAAA,KAAK,EAAEQ,UAAU,CAACR,KADhB;AAEFiB,IAAAA,OAAO,EAAEP,YAFP;AAGFC,IAAAA,QAHE;AAIFC,IAAAA,kBAJE;AAKFG,IAAAA,gBALE;AAMFC,IAAAA;AANE,GAAN;AAQH,CAhCD;;GAAMV,Q;;AAiCN,eAAeA,QAAf","sourcesContent":["import { useReducer } from \"react\";\n\nconst initialInputState = {\n    value: '',\n    isTouched: false\n};\nconst inputStateReducer = (state, action) =>{\n    if(action.type ==='INPUT'){\n       return{\n           value: action.value,\n           isTouched: state.isTouched\n       };\n    }\n    if(action.type ==='BLUR'){\n        return{\n            isTouched: true,\n            value: state.value\n        };   \n    }\n    if(action.type ==='RESET'){\n        return{\n            isTouched: false,\n            value: ''\n        }  \n    }\n    return initialInputState;\n};\n\nconst useInput = (validateValue) => {\n    const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n\n    // const [enteredValue, setEnteredValue] = useState('');\n    // const [isTouched, setIsTouched] = useState(false);\n\n    const valueIsValid = validateValue(inputState.value);\n    const hasError = !valueIsValid && inputState.isTouched;\n\n    const valueChangeHandler = event => {\n        dispatch({type: 'INPUT', value: event.target.value});\n        //setEnteredValue(event.target.value); \n     }\n\n     const valueBlurHandler = (event) => {\n        dispatch({type: 'BLUR'});\n        //setIsTouched(true);\n     }\n     const reset = () => {\n         //setEnteredValue('');\n         //setIsTouched(false);\n         dispatch({type: 'RESET'});\n     }\n\n    return{\n        value: inputState.value,\n        isValid: valueIsValid,\n        hasError,\n        valueChangeHandler,\n        valueBlurHandler,\n        reset\n    };\n};\nexport default useInput;"]},"metadata":{},"sourceType":"module"}