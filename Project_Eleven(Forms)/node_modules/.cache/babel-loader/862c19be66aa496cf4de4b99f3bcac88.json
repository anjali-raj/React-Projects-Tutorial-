{"ast":null,"code":"var _jsxFileName = \"/Users/anjali/Documents/Anjali/React_Tutorial/Project_Eleven(Forms)/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim !== '');\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangedHandler,\n    valueBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.includes('@')); // const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  // const enteredNameIsValid = enteredName.trim() !== '';\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  // const enteredEmailIsValid = enteredEmail.includes('@') && enteredEmail.trim() !== '';\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } // const nameInputChangeHandler = event => {\n  //    setEnteredName(event.target.value); \n  // }\n  //   const emailInputChangeHandler = event => {\n  //     setEnteredEmail(event.target.value); \n  //  }\n  //   const nameInputBlurHandler = event => {\n  //     setEnteredNameTouched(true);\n  //  }\n  //  const emailInputBlurHandler = event => {\n  //   setEnteredEmailTouched(true);\n  //}\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); //setEnteredNameTouched(true);\n    //setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    } //console.log(enteredName);\n    // setEnteredName('');\n    // setEnteredNameTouched(false);\n\n\n    resetNameInput();\n    resetEmailInput(); // setEnteredEmail('');\n    // setEnteredEmailTouched(false)\n  };\n\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputHasError ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangedHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your E-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailChangedHandler,\n        onBlur: emailBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please Enter a valid email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"8UT4KTEffxHit4v+2VX4Q7l4rk4=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/anjali/Documents/Anjali/React_Tutorial/Project_Eleven(Forms)/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangedHandler","valueBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangedHandler","emailBlurHandler","resetEmailInput","includes","formIsValid","formSubmissionHandler","event","preventDefault","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import { useState} from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim !== '');\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangedHandler,\n    valueBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.includes('@'));\n  // const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  \n\n  // const enteredNameIsValid = enteredName.trim() !== '';\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  // const enteredEmailIsValid = enteredEmail.includes('@') && enteredEmail.trim() !== '';\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n  if(enteredNameIsValid && enteredEmailIsValid){\n    formIsValid = true;\n  }\n\n  // const nameInputChangeHandler = event => {\n  //    setEnteredName(event.target.value); \n  // }\n  //   const emailInputChangeHandler = event => {\n  //     setEnteredEmail(event.target.value); \n  //  }\n  //   const nameInputBlurHandler = event => {\n  //     setEnteredNameTouched(true);\n  //  }\n  //  const emailInputBlurHandler = event => {\n  //   setEnteredEmailTouched(true);\n  //}\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    //setEnteredNameTouched(true);\n    //setEnteredEmailTouched(true);\n\n    if(!enteredNameIsValid && !enteredEmailIsValid){\n      return;\n    }\n    //console.log(enteredName);\n    // setEnteredName('');\n    // setEnteredNameTouched(false);\n    resetNameInput();\n    resetEmailInput();\n\n    // setEnteredEmail('');\n    // setEnteredEmailTouched(false)\n  };\n  \n  const nameInputClasses = nameInputHasError? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputHasError? 'form-control invalid' : 'form-control';\n  \n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' onChange={nameChangedHandler} onBlur={nameBlurHandler} value={enteredName}/>\n        {nameInputHasError && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your E-mail</label>\n        <input type='email' id='email' onChange={emailChangedHandler} onBlur={emailBlurHandler} value={enteredEmail}/>\n        {emailInputHasError && <p className=\"error-text\">Please Enter a valid email</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}