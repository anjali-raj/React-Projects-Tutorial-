{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n'@reduxjs/toolkit';\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++, existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      state.totalQuantity--;\n      const existingItem = state.items.find(item => item.id === id);\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending',\n      message: 'Sending Cart Data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-tutorial-c3d46-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent Cart Data Successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending Cart Data Failed!'\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/anjali/Documents/Anjali/React_Tutorial/Project_Thirteen(Advanced_Redux)/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAAiD;AACjD,SAASC,SAAT,QAA0B,YAA1B;AACA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC1BG,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AAACC,IAAAA,KAAK,EAAG,EAAT;AAAaC,IAAAA,aAAa,EAAE;AAA5B,GAFY;AAG1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACH,aAAN,GAAsBI,MAAM,CAACC,OAAP,CAAeL,aAArC;AACAG,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACC,OAAP,CAAeN,KAA7B;AACD,KAJG;;AAKNO,IAAAA,aAAa,CAACH,KAAD,EAAQC,MAAR,EAAe;AACxB,YAAMG,OAAO,GAAGH,MAAM,CAACC,OAAvB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACJ,KAAN,CAAYU,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA7C,CAArB;AACAR,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAG,CAACQ,YAAJ,EAAkB;AACdL,QAAAA,KAAK,CAACJ,KAAN,CAAYa,IAAZ,CAAiB;AACbD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADC;AAEbE,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAFF;AAGbC,UAAAA,QAAQ,EAAE,CAHG;AAIbC,UAAAA,UAAU,EAAER,OAAO,CAACM,KAJP;AAKbhB,UAAAA,IAAI,EAAEU,OAAO,CAACS;AALD,SAAjB;AAOH,OARD,MASK;AACDR,QAAAA,YAAY,CAACM,QAAb,IACAN,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BR,OAAO,CAACM,KAD5D;AAEH;AACJ,KAtBK;;AAuBNI,IAAAA,kBAAkB,CAACd,KAAD,EAAQC,MAAR,EAAe;AAC7B,YAAMO,EAAE,GAAGP,MAAM,CAACC,OAAlB;AACAF,MAAAA,KAAK,CAACH,aAAN;AACA,YAAMQ,YAAY,GAAGL,KAAK,CAACJ,KAAN,CAAYU,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;;AACA,UAAIH,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAgC;AAC5BX,QAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYmB,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AACH,OAFD,MAGK;AACDH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACH;AACJ;;AAlCK;AAHgB,CAAD,CAA7B;AAyCA,OAAO,MAAMM,YAAY,GAAIC,IAAD,IAAU;AAClC,SAAO,MAAMC,QAAN,IAAmB;AACtBA,IAAAA,QAAQ,CACJ1B,SAAS,CAAC2B,gBAAV,CAA2B;AAC3BC,MAAAA,MAAM,EAAE,SADmB;AAE3BP,MAAAA,KAAK,EAAE,SAFoB;AAG3BQ,MAAAA,OAAO,EAAE;AAHkB,KAA3B,CADI,CAAR;;AAQE,UAAMC,WAAW,GAAG,YAAY;AAC9B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+FAAD,EAAkG;AAC1HC,QAAAA,MAAM,EAAG,KADiH;AAE1HC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,IAAf;AAFoH,OAAlG,CAA5B;;AAIE,UAAG,CAACM,QAAQ,CAACM,EAAb,EAAiB;AACf,cAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;AACJ,KARD;;AAUA,QAAI;AACF,YAAMR,WAAW,EAAjB;AAEAJ,MAAAA,QAAQ,CACJ1B,SAAS,CAAC2B,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,SADiB;AAEzBP,QAAAA,KAAK,EAAE,UAFkB;AAGzBQ,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADI,CAAR;AAOD,KAVD,CAUE,OAAMU,KAAN,EAAY;AACZb,MAAAA,QAAQ,CACJ1B,SAAS,CAAC2B,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBP,QAAAA,KAAK,EAAE,QAFkB;AAGzBQ,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADI,CAAR;AAOD;AACN,GAtCD;AAuCH,CAxCM;AA0CP,OAAO,MAAMW,WAAW,GAAGvC,SAAS,CAACwC,OAA9B;AAEP,eAAexC,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";  '@reduxjs/toolkit';\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: {items : [], totalQuantity: 0 },\n    reducers: {\n        replaceCart(state, action) {\n            state.totalQuantity = action.payload.totalQuantity;\n            state.items = action.payload.items;\n          },\n        addItemToCart(state, action){\n            const newItem = action.payload;\n            const existingItem = state.items.find(item => item.id === newItem.id);\n            state.totalQuantity++;\n            if(!existingItem) {\n                state.items.push({\n                    id: newItem.id, \n                    price: newItem.price, \n                    quantity: 1, \n                    totalPrice: newItem.price,\n                    name: newItem.title\n                });\n            }\n            else {\n                existingItem.quantity++,\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n            }    \n        },\n        removeItemFromCart(state, action){\n            const id = action.payload;\n            state.totalQuantity--;\n            const existingItem = state.items.find(item => item.id === id);\n            if (existingItem.quantity === 1){\n                state.items = state.items.filter(item => item.id !== id);\n            }\n            else {\n                existingItem.quantity--;\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n            }\n        }\n    }\n});\n\nexport const sendCartData = (cart) => {\n    return async(dispatch) => {\n        dispatch(\n            uiActions.showNotification({\n            status: 'pending',\n            title: 'Sending',\n            message: 'Sending Cart Data!',\n            })\n          );\n\n          const sendRequest = async () => {\n            const response = await fetch('https://react-http-tutorial-c3d46-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json', { \n                method : 'PUT', \n                body :JSON.stringify(cart),\n              });\n              if(!response.ok) {\n                throw new Error('Sending cart data failed.')\n              }\n          };\n\n          try {\n            await sendRequest();\n\n            dispatch(\n                uiActions.showNotification({\n                  status: 'success',\n                  title: 'Success!',\n                  message: 'Sent Cart Data Successfully!',\n                })\n              );\n          } catch(error){\n            dispatch(\n                uiActions.showNotification({\n                  status: 'error',\n                  title: 'Error!',\n                  message: 'Sending Cart Data Failed!',\n                })\n              );\n          }     \n    };\n};\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}