{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nconst useHttp = applyData => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); //const [tasks, setTasks] = useState([]);\n\n  const sendRequest = useCallback(async requestConfig => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/anjali/Documents/React_Tutorial/Project_Ten(Custom_Hooks)/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","applyData","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAIC,SAAD,IAAe;AAAA;;AAE3B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC,CAH2B,CAI7B;;AAEA,QAAMQ,WAAW,GAAGP,WAAW,CAAC,MAAOQ,aAAP,IAAyB;AACvDJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1BF,aAAa,CAACG,GADY,EAE1B;AACGC,QAAAA,MAAM,EAAEJ,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACI,MAArC,GAA8C,KADzD;AAEGC,QAAAA,OAAO,EAAEL,aAAa,CAACK,OAAd,GAAwBL,aAAa,CAACK,OAAtC,GAAgD,EAF5D;AAGGC,QAAAA,IAAI,EAAEN,aAAa,CAACM,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeR,aAAa,CAACM,IAA7B,CAArB,GAA0D;AAHnE,OAF0B,CAA5B;;AASA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAlB,MAAAA,SAAS,CAACiB,IAAD,CAAT;AACD,KAhBD,CAgBE,OAAOE,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAvB8B,EAuB5B,CAACI,aAAD,EAAgBN,SAAhB,CAvB4B,CAA/B;AAyBA,SAAO;AACHC,IAAAA,SADG;AAEHE,IAAAA,KAFG;AAGHE,IAAAA;AAHG,GAAP;AAKD,CApCD;;GAAMN,O;;AAqCN,eAAeA,OAAf","sourcesContent":["import { useState, useCallback } from \"react\";\n\nconst useHttp = (applyData) => {\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n  //const [tasks, setTasks] = useState([]);\n\n  const sendRequest = useCallback(async (requestConfig) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        requestConfig.url,\n        {\n           method: requestConfig.method ? requestConfig.method : 'GET',\n           headers: requestConfig.headers ? requestConfig.headers : {},\n           body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  }, [requestConfig, applyData]);\n\n  return {\n      isLoading,\n      error,\n      sendRequest,\n  };\n};\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}