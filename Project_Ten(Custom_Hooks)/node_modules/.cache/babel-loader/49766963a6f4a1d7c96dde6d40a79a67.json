{"ast":null,"code":"var _jsxFileName = \"/Users/anjali/Documents/React_Tutorial/Project_Ten(Custom_Hooks)/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useHttp from './hooks/use-http';\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const transformTasks = tasksObj => {\n    const loadedTasks = [];\n\n    for (const taskKey in data) {\n      loadedTasks.push({\n        id: taskKey,\n        text: tasksObj[taskKey].text\n      });\n    }\n\n    setTasks(loadedTasks);\n  };\n\n  const {\n    isLoading,\n    error,\n    sendRequest: fetchTasks\n  } = useHttp({\n    url: 'https://react-rest-97351-default-rtdb.firebaseio.com/tasks.json'\n  }, transformTasks);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      onAddTask: taskAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      items: tasks,\n      loading: isLoading,\n      error: error,\n      onFetch: fetchTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"4w9BeSL0cDl6qv9MILXEex5s9Jk=\", false, function () {\n  return [useHttp];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/anjali/Documents/React_Tutorial/Project_Ten(Custom_Hooks)/src/App.js"],"names":["React","useEffect","useState","useHttp","Tasks","NewTask","App","transformTasks","tasksObj","loadedTasks","taskKey","data","push","id","text","setTasks","isLoading","error","sendRequest","fetchTasks","url","tasks","taskAddHandler","task","prevTasks","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,cAAc,GAAGC,QAAQ,IAAI;AACjC,UAAMC,WAAW,GAAG,EAApB;;AAEE,SAAK,MAAMC,OAAX,IAAsBC,IAAtB,EAA4B;AAC1BF,MAAAA,WAAW,CAACG,IAAZ,CAAiB;AAAEC,QAAAA,EAAE,EAAEH,OAAN;AAAeI,QAAAA,IAAI,EAAEN,QAAQ,CAACE,OAAD,CAAR,CAAkBI;AAAvC,OAAjB;AACD;;AAEDC,IAAAA,QAAQ,CAACN,WAAD,CAAR;AACH,GARD;;AASA,QAAM;AAACO,IAAAA,SAAD;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,WAAW,EAAEC;AAAhC,MAA+ChB,OAAO,CAAC;AAACiB,IAAAA,GAAG,EAAE;AAAN,GAAD,EAA2Eb,cAA3E,CAA5D;AAGA,QAAM,CAACc,KAAD,EAAQN,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AAIAD,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,UAAU;AACX,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;;AAIA,QAAMG,cAAc,GAAIC,IAAD,IAAU;AAC/BR,IAAAA,QAAQ,CAAES,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAED,KADT;AAEE,MAAA,OAAO,EAAEL,SAFX;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,OAAO,EAAEE;AAJX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GApCQb,G;UAU8CH,O;;;KAV9CG,G;AAsCT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport useHttp from './hooks/use-http';\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\n\n\nfunction App() {\n  const transformTasks = tasksObj => {\n    const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({ id: taskKey, text: tasksObj[taskKey].text });\n      }\n\n      setTasks(loadedTasks);\n  };\n  const {isLoading, error, sendRequest: fetchTasks}  = useHttp({url: 'https://react-rest-97351-default-rtdb.firebaseio.com/tasks.json'}, transformTasks);\n\n\n  const [tasks, setTasks] = useState([]);\n\n  \n\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]);\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}